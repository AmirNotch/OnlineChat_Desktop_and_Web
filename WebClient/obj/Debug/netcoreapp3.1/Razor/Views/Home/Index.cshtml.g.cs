#pragma checksum "C:\Users\ibrag\RiderProjects\Server\WebClient\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3b32c58d4e3be3068562d6128ca400d529785da0"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\ibrag\RiderProjects\Server\WebClient\Views\_ViewImports.cshtml"
using WebClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\ibrag\RiderProjects\Server\WebClient\Views\_ViewImports.cshtml"
using WebClient.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3b32c58d4e3be3068562d6128ca400d529785da0", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e05082fef1fa7133f94c96e3adb14fb32174f337", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/signalr.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\ibrag\RiderProjects\Server\WebClient\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<section class=""chat"">
    <div class=""form-wrapper"">
        <div class=""wrapper state-wrapper"">
            <p>State:</p>
            <p id=""conState"">Disconnected</p>
            <button id=""connectButton"" type=""button"" onclick=""connect()"">Connect</button>
        </div>
        <div class=""wrapper login-wrapper"">
            <label for=""name"">Name</label>
            <input id=""name"" type=""text"" placeholder=""Anonymous"">
            <div class=""btn-wrapper"">
                <button type=""button"" onclick=""getMyName()"">Get</button>
                <button type=""button"" onclick=""setMyName()"">Set</button>
            </div>
        </div>
        <div class=""wrapper message-wrapper"">
            <label for=""wrapper message"">Text</label>
            <textarea id=""message""></textarea>
            <button type=""button"" onclick=""sendMessage()"">Send</button>
        </div>
    </div>
    <div class=""messages-wrapper"">
        <div id=""messages-content"">

        </div>
    </div>

</sec");
            WriteLiteral("tion>\r\n\r\n");
            DefineSection("Styles", async() => {
                WriteLiteral(@"
    <style>
        p {
            margin-bottom: 0
        }

        .chat {
            display: flex;
            justify-content: space-between
        }

        .form-wrapper {
            width: 30%
        }

            .form-wrapper .wrapper {
                display: flex;
                align-items: center;
                margin-bottom: 15px;
                justify-content: space-between;
            }

        .login-wrapper, .message-wrapper {
            flex-wrap: wrap;
        }

        .btn-wrapper {
            width: 100%;
            padding-top: 15px;
        }

            .btn-wrapper button {
                float: right;
                width: 30%;
                justify-content: flex-end
            }

                .btn-wrapper button:last-child {
                    margin-right: 10px
                }

        .message-wrapper {
            align-items: flex-start;
        }

            .message-wrapper label {
            ");
                WriteLiteral(@"    margin-right: 15px;
                width: 10%;
            }

            .message-wrapper textarea {
                width: 80%;
            }

            .message-wrapper button {
                margin-left: auto;
                margin-top: 15px;
            }

        .messages-wrapper {
            width: 65%;
            display: block;
        }

            .messages-wrapper #messages-content {
                border: 1px solid #000;
                min-height: 500px;
            }
    </style>
");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3b32c58d4e3be3068562d6128ca400d529785da06925", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script type=""text/javascript"">
        const connection = new signalR.HubConnectionBuilder()
            .withUrl(""https://localhost:44390/messages"")
            .withAutomaticReconnect()
            .build();

        connection.on('Send', (message) => {
            appendMessage(message.sender, message.text, 'black');
        });

        connection.onclose(error => {
            console.log('Connection closed. ', error)
        });

        connection.onreconnecting(error => {
            console.log('Connection reconnecting. ', error);
        });

        connection.onreconnected(connectionId => {
            console.log('Connectin reconnected with id: ', connectionId);
        });

        function appendMessage(sender, message, color) {
            document.querySelector('#messages-content').insertAdjacentHTML(""beforeend"", `<div style=""color:${color}""><p>Sender: ${sender}</p><p>Text: ${message}</p></div><br>`);
        }

        async function connect() {
            ");
                WriteLiteral(@"if (connection.state === 'Disconnected') {
                try {
                    await connection.start();
                }
                catch (error) {
                    console.log(error);
                }
                if (connection.state === 'Connected') {
                    document.querySelector('#conState').textContent = 'Connected';
                    document.querySelector('#conState').style.color = 'green';
                    document.querySelector('#connectButton').textContent = 'Disconnect';
                }
            } else if (connection.state === 'Connected') {
                await connection.stop();
                document.querySelector('#conState').textContent = 'Disconnected';
                document.querySelector('#conState').style.color = 'red';
                document.querySelector('#connectButton').textContent = 'Connect';
            }
        };

        async function sendMessage() {
            if (connection.state === 'Connected') {
    ");
                WriteLiteral(@"            let textArea = document.querySelector('#message');
                let message = { text: textArea.value };
                try {
                    await connection.send('SendMessage', message);
                    appendMessage('Me', message.text, 'green');
                }
                catch (error) {
                    console.log(error);
                }
                document.querySelector('#message').value = '';
            }
        }

        async function getMyName() {
            if (connection.state === 'Connected') {
                try {
                    let myName = await connection.invoke('GetMyName');
                    document.querySelector('#name').value = myName;
                }
                catch (error) {
                    console.log(error);
                }
            }
        }

        async function setMyName() {
            if (connection.state === 'Connected') {
                try {
                    let name = doc");
                WriteLiteral("ument.querySelector(\'#name\').value;\r\n                    await connection.send(\'SetMyName\', name);\r\n                }\r\n                catch (error) {\r\n                    console.log(error);\r\n                }\r\n            }\r\n        }\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
